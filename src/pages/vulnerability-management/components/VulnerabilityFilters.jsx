import React, { useState } from 'react';
import Icon from '../../../components/AppIcon';
import Select from '../../../components/ui/Select';
import { Checkbox } from '../../../components/ui/Checkbox';
import Button from '../../../components/ui/Button';

const VulnerabilityFilters = ({ onFiltersChange, appliedFilters = {} }) => {
  const [filters, setFilters] = useState({
    severity: appliedFilters?.severity || [],
    systems: appliedFilters?.systems || [],
    types: appliedFilters?.types || [],
    dateRange: appliedFilters?.dateRange || 'all',
    status: appliedFilters?.status || []
  });

  const severityOptions = [
    { value: 'critical', label: 'Critical', color: 'text-error' },
    { value: 'high', label: 'High', color: 'text-warning' },
    { value: 'medium', label: 'Medium', color: 'text-accent' },
    { value: 'low', label: 'Low', color: 'text-success' }
  ];

  const systemOptions = [
    { value: 'windows', label: 'Windows Systems' },
    { value: 'linux', label: 'Linux Servers' },
    { value: 'network', label: 'Network Devices' },
    { value: 'web', label: 'Web Applications' },
    { value: 'database', label: 'Database Servers' }
  ];

  const typeOptions = [
    { value: 'rce', label: 'Remote Code Execution' },
    { value: 'sqli', label: 'SQL Injection' },
    { value: 'xss', label: 'Cross-Site Scripting' },
    { value: 'privilege', label: 'Privilege Escalation' },
    { value: 'dos', label: 'Denial of Service' },
    { value: 'info', label: 'Information Disclosure' }
  ];

  const dateRangeOptions = [
    { value: 'all', label: 'All Time' },
    { value: 'today', label: 'Today' },
    { value: 'week', label: 'Last 7 Days' },
    { value: 'month', label: 'Last 30 Days' },
    { value: 'quarter', label: 'Last 3 Months' }
  ];

  const statusOptions = [
    { value: 'open', label: 'Open' },
    { value: 'in-progress', label: 'In Progress' },
    { value: 'resolved', label: 'Resolved' },
    { value: 'ignored', label: 'Ignored' }
  ];

  const handleSeverityChange = (severity, checked) => {
    const newSeverity = checked 
      ? [...filters?.severity, severity]
      : filters?.severity?.filter(s => s !== severity);
    
    const newFilters = { ...filters, severity: newSeverity };
    setFilters(newFilters);
    onFiltersChange(newFilters);
  };

  const handleSystemChange = (system, checked) => {
    const newSystems = checked 
      ? [...filters?.systems, system]
      : filters?.systems?.filter(s => s !== system);
    
    const newFilters = { ...filters, systems: newSystems };
    setFilters(newFilters);
    onFiltersChange(newFilters);
  };

  const handleTypeChange = (type, checked) => {
    const newTypes = checked 
      ? [...filters?.types, type]
      : filters?.types?.filter(t => t !== type);
    
    const newFilters = { ...filters, types: newTypes };
    setFilters(newFilters);
    onFiltersChange(newFilters);
  };

  const handleStatusChange = (status, checked) => {
    const newStatus = checked 
      ? [...filters?.status, status]
      : filters?.status?.filter(s => s !== status);
    
    const newFilters = { ...filters, status: newStatus };
    setFilters(newFilters);
    onFiltersChange(newFilters);
  };

  const handleDateRangeChange = (value) => {
    const newFilters = { ...filters, dateRange: value };
    setFilters(newFilters);
    onFiltersChange(newFilters);
  };

  const clearAllFilters = () => {
    const clearedFilters = {
      severity: [],
      systems: [],
      types: [],
      dateRange: 'all',
      status: []
    };
    setFilters(clearedFilters);
    onFiltersChange(clearedFilters);
  };

  const getActiveFilterCount = () => {
    return filters?.severity?.length + 
           filters?.systems?.length + 
           filters?.types?.length + 
           filters?.status?.length +
           (filters?.dateRange !== 'all' ? 1 : 0);
  };

  return (
    <div className="bg-card border border-border rounded-lg p-4 space-y-6">
      <div className="flex items-center justify-between">
        <h3 className="text-lg font-semibold text-foreground flex items-center">
          <Icon name="Filter" size={20} className="mr-2" />
          Filters
        </h3>
        {getActiveFilterCount() > 0 && (
          <Button
            variant="ghost"
            size="sm"
            onClick={clearAllFilters}
            className="text-muted-foreground hover:text-foreground"
          >
            Clear All ({getActiveFilterCount()})
          </Button>
        )}
      </div>
      {/* Severity Filter */}
      <div className="space-y-3">
        <h4 className="text-sm font-medium text-foreground">Severity Level</h4>
        <div className="space-y-2">
          {severityOptions?.map((option) => (
            <Checkbox
              key={option?.value}
              label={
                <span className={`flex items-center ${option?.color}`}>
                  <Icon name="AlertTriangle" size={14} className="mr-2" />
                  {option?.label}
                </span>
              }
              checked={filters?.severity?.includes(option?.value)}
              onChange={(e) => handleSeverityChange(option?.value, e?.target?.checked)}
            />
          ))}
        </div>
      </div>
      {/* Affected Systems */}
      <div className="space-y-3">
        <h4 className="text-sm font-medium text-foreground">Affected Systems</h4>
        <div className="space-y-2">
          {systemOptions?.map((option) => (
            <Checkbox
              key={option?.value}
              label={option?.label}
              checked={filters?.systems?.includes(option?.value)}
              onChange={(e) => handleSystemChange(option?.value, e?.target?.checked)}
            />
          ))}
        </div>
      </div>
      {/* Vulnerability Types */}
      <div className="space-y-3">
        <h4 className="text-sm font-medium text-foreground">Vulnerability Types</h4>
        <div className="space-y-2">
          {typeOptions?.map((option) => (
            <Checkbox
              key={option?.value}
              label={option?.label}
              checked={filters?.types?.includes(option?.value)}
              onChange={(e) => handleTypeChange(option?.value, e?.target?.checked)}
            />
          ))}
        </div>
      </div>
      {/* Status Filter */}
      <div className="space-y-3">
        <h4 className="text-sm font-medium text-foreground">Status</h4>
        <div className="space-y-2">
          {statusOptions?.map((option) => (
            <Checkbox
              key={option?.value}
              label={option?.label}
              checked={filters?.status?.includes(option?.value)}
              onChange={(e) => handleStatusChange(option?.value, e?.target?.checked)}
            />
          ))}
        </div>
      </div>
      {/* Date Range */}
      <div className="space-y-3">
        <h4 className="text-sm font-medium text-foreground">Date Range</h4>
        <Select
          options={dateRangeOptions}
          value={filters?.dateRange}
          onChange={handleDateRangeChange}
          placeholder="Select date range"
        />
      </div>
    </div>
  );
};

export default VulnerabilityFilters;