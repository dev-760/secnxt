import React, { useState } from 'react';
import Icon from '../../../components/AppIcon';
import Button from '../../../components/ui/Button';
import { Checkbox } from '../../../components/ui/Checkbox';

const VulnerabilityTable = ({ 
  vulnerabilities, 
  selectedItems, 
  onSelectionChange, 
  onRowClick, 
  onSort,
  sortConfig 
}) => {
  const [expandedRows, setExpandedRows] = useState(new Set());

  const getSeverityColor = (severity) => {
    switch (severity?.toLowerCase()) {
      case 'critical':
        return 'text-error bg-error/10 border-error/20';
      case 'high':
        return 'text-warning bg-warning/10 border-warning/20';
      case 'medium':
        return 'text-accent bg-accent/10 border-accent/20';
      case 'low':
        return 'text-success bg-success/10 border-success/20';
      default:
        return 'text-muted-foreground bg-muted/10 border-border';
    }
  };

  const getSeverityIcon = (severity) => {
    switch (severity?.toLowerCase()) {
      case 'critical':
        return 'AlertTriangle';
      case 'high':
        return 'AlertCircle';
      case 'medium':
        return 'Info';
      case 'low':
        return 'CheckCircle';
      default:
        return 'Circle';
    }
  };

  const getStatusColor = (status) => {
    switch (status?.toLowerCase()) {
      case 'open':
        return 'text-error bg-error/10';
      case 'in-progress':
        return 'text-warning bg-warning/10';
      case 'resolved':
        return 'text-success bg-success/10';
      case 'ignored':
        return 'text-muted-foreground bg-muted/10';
      default:
        return 'text-muted-foreground bg-muted/10';
    }
  };

  const handleSelectAll = (checked) => {
    if (checked) {
      onSelectionChange(vulnerabilities?.map(v => v?.id));
    } else {
      onSelectionChange([]);
    }
  };

  const handleSelectItem = (id, checked) => {
    if (checked) {
      onSelectionChange([...selectedItems, id]);
    } else {
      onSelectionChange(selectedItems?.filter(item => item !== id));
    }
  };

  const toggleRowExpansion = (id) => {
    const newExpanded = new Set(expandedRows);
    if (newExpanded?.has(id)) {
      newExpanded?.delete(id);
    } else {
      newExpanded?.add(id);
    }
    setExpandedRows(newExpanded);
  };

  const handleSort = (field) => {
    const direction = sortConfig?.field === field && sortConfig?.direction === 'asc' ? 'desc' : 'asc';
    onSort({ field, direction });
  };

  const getSortIcon = (field) => {
    if (sortConfig?.field !== field) return 'ArrowUpDown';
    return sortConfig?.direction === 'asc' ? 'ArrowUp' : 'ArrowDown';
  };

  const isAllSelected = selectedItems?.length === vulnerabilities?.length && vulnerabilities?.length > 0;
  const isIndeterminate = selectedItems?.length > 0 && selectedItems?.length < vulnerabilities?.length;

  return (
    <div className="bg-card border border-border rounded-lg overflow-hidden">
      <div className="overflow-x-auto">
        <table className="w-full">
          <thead className="bg-muted/30 border-b border-border">
            <tr>
              <th className="w-12 p-4">
                <Checkbox
                  checked={isAllSelected}
                  indeterminate={isIndeterminate}
                  onChange={(e) => handleSelectAll(e?.target?.checked)}
                />
              </th>
              <th className="text-left p-4">
                <button
                  onClick={() => handleSort('cve')}
                  className="flex items-center space-x-2 text-sm font-medium text-foreground hover:text-primary transition-colors"
                >
                  <span>CVE ID</span>
                  <Icon name={getSortIcon('cve')} size={14} />
                </button>
              </th>
              <th className="text-left p-4">
                <button
                  onClick={() => handleSort('severity')}
                  className="flex items-center space-x-2 text-sm font-medium text-foreground hover:text-primary transition-colors"
                >
                  <span>Severity</span>
                  <Icon name={getSortIcon('severity')} size={14} />
                </button>
              </th>
              <th className="text-left p-4">
                <button
                  onClick={() => handleSort('affectedDevices')}
                  className="flex items-center space-x-2 text-sm font-medium text-foreground hover:text-primary transition-colors"
                >
                  <span>Affected Devices</span>
                  <Icon name={getSortIcon('affectedDevices')} size={14} />
                </button>
              </th>
              <th className="text-left p-4">
                <button
                  onClick={() => handleSort('riskScore')}
                  className="flex items-center space-x-2 text-sm font-medium text-foreground hover:text-primary transition-colors"
                >
                  <span>Risk Score</span>
                  <Icon name={getSortIcon('riskScore')} size={14} />
                </button>
              </th>
              <th className="text-left p-4">
                <button
                  onClick={() => handleSort('status')}
                  className="flex items-center space-x-2 text-sm font-medium text-foreground hover:text-primary transition-colors"
                >
                  <span>Status</span>
                  <Icon name={getSortIcon('status')} size={14} />
                </button>
              </th>
              <th className="text-left p-4">
                <button
                  onClick={() => handleSort('discoveredDate')}
                  className="flex items-center space-x-2 text-sm font-medium text-foreground hover:text-primary transition-colors"
                >
                  <span>Discovered</span>
                  <Icon name={getSortIcon('discoveredDate')} size={14} />
                </button>
              </th>
              <th className="w-12 p-4"></th>
            </tr>
          </thead>
          <tbody className="divide-y divide-border">
            {vulnerabilities?.map((vulnerability) => (
              <React.Fragment key={vulnerability?.id}>
                <tr className="hover:bg-muted/20 transition-colors">
                  <td className="p-4">
                    <Checkbox
                      checked={selectedItems?.includes(vulnerability?.id)}
                      onChange={(e) => handleSelectItem(vulnerability?.id, e?.target?.checked)}
                    />
                  </td>
                  <td className="p-4">
                    <button
                      onClick={() => onRowClick(vulnerability)}
                      className="text-primary hover:text-primary/80 font-mono text-sm transition-colors"
                    >
                      {vulnerability?.cve}
                    </button>
                  </td>
                  <td className="p-4">
                    <span className={`inline-flex items-center px-2.5 py-1 rounded-full text-xs font-medium border ${getSeverityColor(vulnerability?.severity)}`}>
                      <Icon name={getSeverityIcon(vulnerability?.severity)} size={12} className="mr-1" />
                      {vulnerability?.severity}
                    </span>
                  </td>
                  <td className="p-4">
                    <div className="flex items-center space-x-2">
                      <Icon name="Monitor" size={16} className="text-muted-foreground" />
                      <span className="text-sm text-foreground">{vulnerability?.affectedDevices}</span>
                    </div>
                  </td>
                  <td className="p-4">
                    <div className="flex items-center space-x-2">
                      <div className="w-16 bg-muted rounded-full h-2">
                        <div 
                          className={`h-2 rounded-full ${
                            vulnerability?.riskScore >= 8 ? 'bg-error' :
                            vulnerability?.riskScore >= 6 ? 'bg-warning' :
                            vulnerability?.riskScore >= 4 ? 'bg-accent' : 'bg-success'
                          }`}
                          style={{ width: `${vulnerability?.riskScore * 10}%` }}
                        />
                      </div>
                      <span className="text-sm font-medium text-foreground">{vulnerability?.riskScore}/10</span>
                    </div>
                  </td>
                  <td className="p-4">
                    <span className={`inline-flex items-center px-2.5 py-1 rounded-full text-xs font-medium ${getStatusColor(vulnerability?.status)}`}>
                      {vulnerability?.status}
                    </span>
                  </td>
                  <td className="p-4">
                    <span className="text-sm text-muted-foreground">{vulnerability?.discoveredDate}</span>
                  </td>
                  <td className="p-4">
                    <button
                      onClick={() => toggleRowExpansion(vulnerability?.id)}
                      className="p-1 rounded hover:bg-muted/50 transition-colors"
                    >
                      <Icon 
                        name={expandedRows?.has(vulnerability?.id) ? "ChevronUp" : "ChevronDown"} 
                        size={16} 
                        className="text-muted-foreground" 
                      />
                    </button>
                  </td>
                </tr>
                {expandedRows?.has(vulnerability?.id) && (
                  <tr>
                    <td colSpan="8" className="p-0">
                      <div className="bg-muted/10 p-6 border-t border-border">
                        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                          <div>
                            <h4 className="text-sm font-semibold text-foreground mb-3">Description</h4>
                            <p className="text-sm text-muted-foreground mb-4">{vulnerability?.description}</p>
                            
                            <h4 className="text-sm font-semibold text-foreground mb-3">Affected Software</h4>
                            <div className="space-y-2">
                              {vulnerability?.affectedSoftware?.map((software, index) => (
                                <div key={index} className="flex items-center space-x-2">
                                  <Icon name="Package" size={14} className="text-muted-foreground" />
                                  <span className="text-sm text-foreground">{software}</span>
                                </div>
                              ))}
                            </div>
                          </div>
                          
                          <div>
                            <h4 className="text-sm font-semibold text-foreground mb-3 flex items-center">
                              <Icon name="Sparkles" size={16} className="mr-2 text-accent" />
                              AI Remediation Recommendations
                            </h4>
                            <div className="bg-accent/5 border border-accent/20 rounded-lg p-4">
                              <p className="text-sm text-foreground mb-3">{vulnerability?.aiRecommendation}</p>
                              <div className="flex items-center space-x-2">
                                <Button variant="outline" size="sm">
                                  <Icon name="Download" size={14} className="mr-2" />
                                  Download Patch
                                </Button>
                                <Button variant="ghost" size="sm">
                                  <Icon name="ExternalLink" size={14} className="mr-2" />
                                  View Details
                                </Button>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </td>
                  </tr>
                )}
              </React.Fragment>
            ))}
          </tbody>
        </table>
      </div>
      {vulnerabilities?.length === 0 && (
        <div className="p-12 text-center">
          <Icon name="Shield" size={48} className="text-muted-foreground mx-auto mb-4" />
          <h3 className="text-lg font-semibold text-foreground mb-2">No Vulnerabilities Found</h3>
          <p className="text-muted-foreground">No vulnerabilities match your current filters.</p>
        </div>
      )}
    </div>
  );
};

export default VulnerabilityTable;