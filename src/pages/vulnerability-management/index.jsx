import React, { useState, useEffect } from 'react';
import NavigationSidebar from '../../components/ui/NavigationSidebar';
import UserProfileDropdown from '../../components/ui/UserProfileDropdown';
import NotificationCenter from '../../components/ui/NotificationCenter';
import LanguageSwitcher from '../../components/ui/LanguageSwitcher';
import VulnerabilityFilters from './components/VulnerabilityFilters';
import VulnerabilityTable from './components/VulnerabilityTable';
import VulnerabilityToolbar from './components/VulnerabilityToolbar';
import VulnerabilityDetailsModal from './components/VulnerabilityDetailsModal';
import VulnerabilityMobileCard from './components/VulnerabilityMobileCard';
import Icon from '../../components/AppIcon';
import Button from '../../components/ui/Button';

const VulnerabilityManagement = () => {
  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);
  const [isMobile, setIsMobile] = useState(false);
  const [currentLanguage, setCurrentLanguage] = useState('en');
  const [selectedVulnerabilities, setSelectedVulnerabilities] = useState([]);
  const [filters, setFilters] = useState({
    severity: [],
    systems: [],
    types: [],
    dateRange: 'all',
    status: []
  });
  const [sortConfig, setSortConfig] = useState({ field: 'riskScore', direction: 'desc' });
  const [selectedVulnerability, setSelectedVulnerability] = useState(null);
  const [showDetailsModal, setShowDetailsModal] = useState(false);
  const [isLoading, setIsLoading] = useState(false);

  // Mock vulnerability data
  const mockVulnerabilities = [
    {
      id: 1,
      cve: 'CVE-2024-0001',
      title: 'Remote Code Execution in Apache HTTP Server',
      severity: 'Critical',
      riskScore: 9.8,
      cvssScore: 9.8,
      affectedDevices: 15,
      affectedUsers: 150,
      estimatedCost: '25,000',
      status: 'Open',
      discoveredDate: '2025-01-15',
      description: `A critical remote code execution vulnerability exists in Apache HTTP Server versions 2.4.0 through 2.4.58. This vulnerability allows an unauthenticated attacker to execute arbitrary code on the target system by sending specially crafted HTTP requests. The vulnerability stems from improper input validation in the mod_rewrite module, which can lead to buffer overflow conditions when processing malicious requests.`,
      affectedSoftware: [
        'Apache HTTP Server 2.4.58',
        'Apache HTTP Server 2.4.57',
        'Apache HTTP Server 2.4.56'
      ],
      aiRecommendation: `Immediate action required: This critical vulnerability poses severe risk to your infrastructure. Apply the latest security patch (Apache 2.4.59) immediately. If patching is not possible, implement WAF rules to block malicious requests and consider temporarily disabling mod_rewrite module on non-essential systems.`,
      publicExploit: true,
      weaponized: true,
      attackVector: 'Network',
      attackComplexity: 'Low',
      privilegesRequired: 'None',
      userInteraction: 'None',
      confidentialityImpact: 'High',
      integrityImpact: 'High',
      availabilityImpact: 'High',
      immediateActions: [
        'Apply security patch Apache 2.4.59 immediately',
        'Implement WAF rules to block exploitation attempts',
        'Monitor affected systems for signs of compromise',
        'Isolate critical systems if patch cannot be applied'
      ],
      longTermActions: [
        'Implement automated patch management system',
        'Regular security assessments of web infrastructure',
        'Enhanced monitoring and logging for web servers'
      ],
      patches: [
        { name: 'Apache HTTP Server 2.4.59', version: '2.4.59', status: 'Available' },
        { name: 'Security Hotfix Package', version: '2.4.58-sec1', status: 'Testing' }
      ],
      workarounds: [
        'Disable mod_rewrite module temporarily',
        'Implement strict input validation at WAF level',
        'Restrict access to affected endpoints'
      ]
    },
    {
      id: 2,
      cve: 'CVE-2024-0002',
      title: 'SQL Injection in Customer Database',
      severity: 'High',
      riskScore: 8.5,
      cvssScore: 8.5,
      affectedDevices: 3,
      affectedUsers: 500,
      estimatedCost: '15,000',
      status: 'In Progress',
      discoveredDate: '2025-01-14',
      description: `A high-severity SQL injection vulnerability has been identified in the customer management system. The vulnerability allows authenticated users to execute arbitrary SQL commands through the search functionality, potentially leading to unauthorized data access, modification, or deletion.`,
      affectedSoftware: [
        'Customer Management System v3.2.1',
        'Database Connector Module v1.8.3'
      ],
      aiRecommendation: `High priority remediation needed: Implement parameterized queries and input validation immediately. Review all database interactions for similar vulnerabilities. Consider implementing database activity monitoring to detect exploitation attempts.`,
      publicExploit: false,
      weaponized: false,
      attackVector: 'Network',
      attackComplexity: 'Low',
      privilegesRequired: 'Low',
      userInteraction: 'None',
      confidentialityImpact: 'High',
      integrityImpact: 'High',
      availabilityImpact: 'Low'
    },
    {
      id: 3,
      cve: 'CVE-2024-0003',
      title: 'Cross-Site Scripting in Web Portal',
      severity: 'Medium',
      riskScore: 6.2,
      cvssScore: 6.2,
      affectedDevices: 8,
      affectedUsers: 200,
      estimatedCost: '8,000',
      status: 'Open',
      discoveredDate: '2025-01-13',
      description: `A stored cross-site scripting (XSS) vulnerability exists in the user profile section of the web portal. Malicious scripts can be injected and executed when other users view the affected profiles.`,
      affectedSoftware: [
        'Web Portal v2.1.4',
        'User Management Module v1.5.2'
      ],
      aiRecommendation: `Medium priority: Implement proper input sanitization and output encoding. Deploy Content Security Policy (CSP) headers to mitigate XSS attacks. Review all user input fields for similar vulnerabilities.`,
      publicExploit: false,
      weaponized: false,
      attackVector: 'Network',
      attackComplexity: 'Low',
      privilegesRequired: 'Low',
      userInteraction: 'Required',
      confidentialityImpact: 'Low',
      integrityImpact: 'Low',
      availabilityImpact: 'None'
    },
    {
      id: 4,
      cve: 'CVE-2024-0004',
      title: 'Privilege Escalation in Windows Service',
      severity: 'High',
      riskScore: 7.8,
      cvssScore: 7.8,
      affectedDevices: 25,
      affectedUsers: 100,
      estimatedCost: '12,000',
      status: 'Resolved',
      discoveredDate: '2025-01-12',
      description: `A privilege escalation vulnerability in the custom Windows service allows local users to gain SYSTEM privileges through improper service configuration and weak file permissions.`,
      affectedSoftware: [
        'Custom Windows Service v1.3.2',
        'Service Manager v2.1.0'
      ],
      aiRecommendation: `Resolved: Service has been updated with proper permissions and security configurations. Monitor for any signs of previous exploitation and ensure all instances are updated.`,
      publicExploit: true,
      weaponized: false,
      attackVector: 'Local',
      attackComplexity: 'Low',
      privilegesRequired: 'Low',
      userInteraction: 'None',
      confidentialityImpact: 'High',
      integrityImpact: 'High',
      availabilityImpact: 'High'
    },
    {
      id: 5,
      cve: 'CVE-2024-0005',
      title: 'Information Disclosure in API Endpoint',
      severity: 'Low',
      riskScore: 3.5,
      cvssScore: 3.5,
      affectedDevices: 5,
      affectedUsers: 50,
      estimatedCost: '2,000',
      status: 'Ignored',
      discoveredDate: '2025-01-11',
      description: `An information disclosure vulnerability in the API endpoint exposes non-sensitive system information to authenticated users. While not critical, it could aid in reconnaissance activities.`,
      affectedSoftware: [
        'REST API v1.2.3',
        'Authentication Module v2.0.1'
      ],
      aiRecommendation: `Low priority: While marked as ignored, consider implementing proper information filtering in API responses to follow security best practices and reduce attack surface.`,
      publicExploit: false,
      weaponized: false,
      attackVector: 'Network',
      attackComplexity: 'Low',
      privilegesRequired: 'Low',
      userInteraction: 'None',
      confidentialityImpact: 'Low',
      integrityImpact: 'None',
      availabilityImpact: 'None'
    }
  ];

  useEffect(() => {
    const checkMobile = () => {
      setIsMobile(window.innerWidth < 768);
    };
    
    checkMobile();
    window.addEventListener('resize', checkMobile);
    return () => window.removeEventListener('resize', checkMobile);
  }, []);

  useEffect(() => {
    const savedLanguage = localStorage.getItem('preferred-language');
    if (savedLanguage) {
      setCurrentLanguage(savedLanguage);
    }
  }, []);

  const handleLanguageChange = (language) => {
    setCurrentLanguage(language);
  };

  const handleFiltersChange = (newFilters) => {
    setFilters(newFilters);
  };

  const handleSort = (sortConfig) => {
    setSortConfig(sortConfig);
  };

  const handleVulnerabilityClick = (vulnerability) => {
    setSelectedVulnerability(vulnerability);
    setShowDetailsModal(true);
  };

  const handleStatusUpdate = (vulnerabilityId, newStatus) => {
    // In a real app, this would update the backend
    console.log(`Updating vulnerability ${vulnerabilityId} status to ${newStatus}`);
    setShowDetailsModal(false);
  };

  const handleScheduleScan = (schedule) => {
    console.log('Scheduling scan:', schedule);
    // In a real app, this would configure the scan schedule
  };

  const handleExport = (format) => {
    console.log('Exporting vulnerabilities as:', format);
    // In a real app, this would generate and download the file
  };

  const handleBulkAction = (action) => {
    console.log('Bulk action:', action, 'on items:', selectedVulnerabilities);
    // In a real app, this would perform the bulk action
  };

  const handleRefresh = () => {
    setIsLoading(true);
    // Simulate API call
    setTimeout(() => {
      setIsLoading(false);
    }, 2000);
  };

  const filterVulnerabilities = (vulnerabilities) => {
    return vulnerabilities?.filter(vuln => {
      // Severity filter
      if (filters?.severity?.length > 0 && !filters?.severity?.includes(vuln?.severity?.toLowerCase())) {
        return false;
      }
      
      // Status filter
      if (filters?.status?.length > 0 && !filters?.status?.includes(vuln?.status?.toLowerCase()?.replace(' ', '-'))) {
        return false;
      }
      
      // Date range filter
      if (filters?.dateRange !== 'all') {
        const vulnDate = new Date(vuln.discoveredDate);
        const now = new Date();
        const daysDiff = Math.floor((now - vulnDate) / (1000 * 60 * 60 * 24));
        
        switch (filters?.dateRange) {
          case 'today':
            if (daysDiff > 0) return false;
            break;
          case 'week':
            if (daysDiff > 7) return false;
            break;
          case 'month':
            if (daysDiff > 30) return false;
            break;
          case 'quarter':
            if (daysDiff > 90) return false;
            break;
        }
      }
      
      return true;
    });
  };

  const sortVulnerabilities = (vulnerabilities) => {
    return [...vulnerabilities]?.sort((a, b) => {
      let aValue = a?.[sortConfig?.field];
      let bValue = b?.[sortConfig?.field];
      
      if (typeof aValue === 'string') {
        aValue = aValue?.toLowerCase();
        bValue = bValue?.toLowerCase();
      }
      
      if (sortConfig?.direction === 'asc') {
        return aValue > bValue ? 1 : -1;
      } else {
        return aValue < bValue ? 1 : -1;
      }
    });
  };

  const filteredAndSortedVulnerabilities = sortVulnerabilities(filterVulnerabilities(mockVulnerabilities));

  const getTranslatedText = (key) => {
    const translations = {
      en: {
        title: 'Vulnerability Management',
        subtitle: 'Monitor, assess, and remediate security vulnerabilities',
        totalVulnerabilities: 'Total Vulnerabilities',
        criticalVulnerabilities: 'Critical',
        highVulnerabilities: 'High',
        mediumVulnerabilities: 'Medium',
        lowVulnerabilities: 'Low'
      },
      ar: {
        title: 'إدارة الثغرات الأمنية',
        subtitle: 'مراقبة وتقييم ومعالجة الثغرات الأمنية',
        totalVulnerabilities: 'إجمالي الثغرات',
        criticalVulnerabilities: 'حرجة',
        highVulnerabilities: 'عالية',
        mediumVulnerabilities: 'متوسطة',
        lowVulnerabilities: 'منخفضة'
      },
      fr: {
        title: 'Gestion des Vulnérabilités',
        subtitle: 'Surveiller, évaluer et corriger les vulnérabilités de sécurité',
        totalVulnerabilities: 'Total des Vulnérabilités',
        criticalVulnerabilities: 'Critique',
        highVulnerabilities: 'Élevé',
        mediumVulnerabilities: 'Moyen',
        lowVulnerabilities: 'Faible'
      }
    };
    
    return translations?.[currentLanguage]?.[key] || translations?.en?.[key];
  };

  const vulnerabilityStats = {
    total: filteredAndSortedVulnerabilities?.length,
    critical: filteredAndSortedVulnerabilities?.filter(v => v?.severity?.toLowerCase() === 'critical')?.length,
    high: filteredAndSortedVulnerabilities?.filter(v => v?.severity?.toLowerCase() === 'high')?.length,
    medium: filteredAndSortedVulnerabilities?.filter(v => v?.severity?.toLowerCase() === 'medium')?.length,
    low: filteredAndSortedVulnerabilities?.filter(v => v?.severity?.toLowerCase() === 'low')?.length
  };

  return (
    <div className="min-h-screen bg-background">
      <NavigationSidebar 
        isCollapsed={sidebarCollapsed} 
        onToggleCollapse={() => setSidebarCollapsed(!sidebarCollapsed)} 
      />
      <div className={`transition-all duration-300 ${
        isMobile ? 'ml-0 pb-16' : sidebarCollapsed ? 'ml-16' : 'ml-60'
      }`}>
        {/* Header */}
        <header className="bg-card border-b border-border px-6 py-4">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-2xl font-bold text-foreground">{getTranslatedText('title')}</h1>
              <p className="text-muted-foreground">{getTranslatedText('subtitle')}</p>
            </div>
            <div className="flex items-center space-x-4">
              <LanguageSwitcher 
                currentLanguage={currentLanguage}
                onLanguageChange={handleLanguageChange}
              />
              <NotificationCenter 
                onMarkAsRead={() => {}}
                onMarkAllAsRead={() => {}}
                onNotificationClick={() => {}}
              />
              <UserProfileDropdown 
                onLogout={() => {}}
                onSwitchOrganization={() => {}}
              />
            </div>
          </div>
        </header>

        {/* Stats Cards */}
        <div className="p-6">
          <div className="grid grid-cols-2 md:grid-cols-5 gap-4 mb-6">
            <div className="bg-card border border-border rounded-lg p-4">
              <div className="flex items-center space-x-3">
                <Icon name="Shield" size={24} className="text-primary" />
                <div>
                  <div className="text-2xl font-bold text-foreground">{vulnerabilityStats?.total}</div>
                  <div className="text-sm text-muted-foreground">{getTranslatedText('totalVulnerabilities')}</div>
                </div>
              </div>
            </div>
            <div className="bg-card border border-border rounded-lg p-4">
              <div className="flex items-center space-x-3">
                <Icon name="AlertTriangle" size={24} className="text-error" />
                <div>
                  <div className="text-2xl font-bold text-error">{vulnerabilityStats?.critical}</div>
                  <div className="text-sm text-muted-foreground">{getTranslatedText('criticalVulnerabilities')}</div>
                </div>
              </div>
            </div>
            <div className="bg-card border border-border rounded-lg p-4">
              <div className="flex items-center space-x-3">
                <Icon name="AlertCircle" size={24} className="text-warning" />
                <div>
                  <div className="text-2xl font-bold text-warning">{vulnerabilityStats?.high}</div>
                  <div className="text-sm text-muted-foreground">{getTranslatedText('highVulnerabilities')}</div>
                </div>
              </div>
            </div>
            <div className="bg-card border border-border rounded-lg p-4">
              <div className="flex items-center space-x-3">
                <Icon name="Info" size={24} className="text-accent" />
                <div>
                  <div className="text-2xl font-bold text-accent">{vulnerabilityStats?.medium}</div>
                  <div className="text-sm text-muted-foreground">{getTranslatedText('mediumVulnerabilities')}</div>
                </div>
              </div>
            </div>
            <div className="bg-card border border-border rounded-lg p-4">
              <div className="flex items-center space-x-3">
                <Icon name="CheckCircle" size={24} className="text-success" />
                <div>
                  <div className="text-2xl font-bold text-success">{vulnerabilityStats?.low}</div>
                  <div className="text-sm text-muted-foreground">{getTranslatedText('lowVulnerabilities')}</div>
                </div>
              </div>
            </div>
          </div>

          {/* Main Content */}
          <div className="grid grid-cols-1 lg:grid-cols-12 gap-6">
            {/* Filters Sidebar */}
            {!isMobile && (
              <div className="lg:col-span-3">
                <VulnerabilityFilters 
                  onFiltersChange={handleFiltersChange}
                  appliedFilters={filters}
                />
              </div>
            )}

            {/* Main Content Area */}
            <div className="lg:col-span-9">
              <div className="space-y-6">
                {/* Toolbar */}
                <VulnerabilityToolbar
                  selectedCount={selectedVulnerabilities?.length}
                  onScheduleScan={handleScheduleScan}
                  onExport={handleExport}
                  onBulkAction={handleBulkAction}
                  onRefresh={handleRefresh}
                  lastScanTime={new Date(Date.now() - 2 * 60 * 60 * 1000)}
                />

                {/* Loading State */}
                {isLoading && (
                  <div className="bg-card border border-border rounded-lg p-12 text-center">
                    <Icon name="RotateCcw" size={48} className="text-primary mx-auto mb-4 animate-spin" />
                    <h3 className="text-lg font-semibold text-foreground mb-2">Scanning for Vulnerabilities</h3>
                    <p className="text-muted-foreground">Please wait while we analyze your systems...</p>
                  </div>
                )}

                {/* Vulnerability List */}
                {!isLoading && (
                  <>
                    {isMobile ? (
                      <div className="space-y-4">
                        {filteredAndSortedVulnerabilities?.map((vulnerability) => (
                          <VulnerabilityMobileCard
                            key={vulnerability?.id}
                            vulnerability={vulnerability}
                            isSelected={selectedVulnerabilities?.includes(vulnerability?.id)}
                            onSelectionChange={(id, selected) => {
                              if (selected) {
                                setSelectedVulnerabilities([...selectedVulnerabilities, id]);
                              } else {
                                setSelectedVulnerabilities(selectedVulnerabilities?.filter(item => item !== id));
                              }
                            }}
                            onCardClick={handleVulnerabilityClick}
                          />
                        ))}
                      </div>
                    ) : (
                      <VulnerabilityTable
                        vulnerabilities={filteredAndSortedVulnerabilities}
                        selectedItems={selectedVulnerabilities}
                        onSelectionChange={setSelectedVulnerabilities}
                        onRowClick={handleVulnerabilityClick}
                        onSort={handleSort}
                        sortConfig={sortConfig}
                      />
                    )}
                  </>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
      {/* Vulnerability Details Modal */}
      <VulnerabilityDetailsModal
        vulnerability={selectedVulnerability}
        isOpen={showDetailsModal}
        onClose={() => setShowDetailsModal(false)}
        onStatusUpdate={handleStatusUpdate}
      />
      {/* Mobile Filters Modal */}
      {isMobile && (
        <div className="fixed bottom-16 right-4 z-40">
          <Button
            variant="default"
            className="rounded-full w-14 h-14 shadow-lg"
            onClick={() => {
              // In a real app, this would open a mobile filters modal
              console.log('Open mobile filters');
            }}
          >
            <Icon name="Filter" size={20} />
          </Button>
        </div>
      )}
    </div>
  );
};

export default VulnerabilityManagement;