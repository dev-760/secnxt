import React, { useState } from 'react';
import Icon from '../../../components/AppIcon';
import Button from '../../../components/ui/Button';

const VulnerabilityOverview = ({ vulnerabilities = [] }) => {
  const [selectedCategory, setSelectedCategory] = useState('all');

  const mockVulnerabilities = vulnerabilities?.length > 0 ? vulnerabilities : [
    {
      id: 1,
      title: 'Outdated SSL Certificate',
      severity: 'critical',
      category: 'network',
      affectedAssets: 3,
      cvsScore: 9.1,
      description: 'SSL certificates expired on 3 web servers, exposing data transmission',
      remediation: 'Renew SSL certificates immediately',
      timeToFix: '2 hours',
      discoveredDate: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000)
    },
    {
      id: 2,
      title: 'Unpatched Windows Systems',
      severity: 'high',
      category: 'system',
      affectedAssets: 12,
      cvsScore: 7.8,
      description: 'Multiple Windows workstations missing critical security updates',
      remediation: 'Deploy Windows updates via WSUS',
      timeToFix: '4 hours',
      discoveredDate: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000)
    },
    {
      id: 3,
      title: 'Weak Password Policy',
      severity: 'medium',
      category: 'identity',
      affectedAssets: 25,
      cvsScore: 5.4,
      description: 'Password policy allows weak passwords, increasing brute force risk',
      remediation: 'Implement stronger password requirements',
      timeToFix: '1 hour',
      discoveredDate: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)
    },
    {
      id: 4,
      title: 'Open Database Port',
      severity: 'high',
      category: 'network',
      affectedAssets: 1,
      cvsScore: 8.2,
      description: 'Database server port 3306 exposed to internet without proper firewall rules',
      remediation: 'Configure firewall to restrict database access',
      timeToFix: '30 minutes',
      discoveredDate: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000)
    },
    {
      id: 5,
      title: 'Outdated Antivirus Definitions',
      severity: 'low',
      category: 'endpoint',
      affectedAssets: 8,
      cvsScore: 3.1,
      description: 'Antivirus definitions are more than 7 days old on several endpoints',
      remediation: 'Update antivirus definitions automatically',
      timeToFix: '15 minutes',
      discoveredDate: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000)
    }
  ];

  const categories = [
    { id: 'all', label: 'All Categories', icon: 'Grid3X3' },
    { id: 'network', label: 'Network', icon: 'Network' },
    { id: 'system', label: 'System', icon: 'Monitor' },
    { id: 'identity', label: 'Identity', icon: 'User' },
    { id: 'endpoint', label: 'Endpoint', icon: 'Smartphone' }
  ];

  const getSeverityColor = (severity) => {
    switch (severity) {
      case 'critical': return 'text-error border-error bg-error/10';
      case 'high': return 'text-warning border-warning bg-warning/10';
      case 'medium': return 'text-accent border-accent bg-accent/10';
      case 'low': return 'text-success border-success bg-success/10';
      default: return 'text-muted-foreground border-border bg-muted/10';
    }
  };

  const getCVSSColor = (score) => {
    if (score >= 9.0) return 'text-error';
    if (score >= 7.0) return 'text-warning';
    if (score >= 4.0) return 'text-accent';
    return 'text-success';
  };

  const filteredVulnerabilities = selectedCategory === 'all' 
    ? mockVulnerabilities 
    : mockVulnerabilities?.filter(vuln => vuln?.category === selectedCategory);

  const getVulnerabilityStats = () => {
    const stats = mockVulnerabilities?.reduce((acc, vuln) => {
      acc[vuln.severity] = (acc?.[vuln?.severity] || 0) + 1;
      return acc;
    }, {});
    
    return {
      critical: stats?.critical || 0,
      high: stats?.high || 0,
      medium: stats?.medium || 0,
      low: stats?.low || 0,
      total: mockVulnerabilities?.length
    };
  };

  const stats = getVulnerabilityStats();

  const formatDate = (date) => {
    const now = new Date();
    const diff = now - date;
    const days = Math.floor(diff / (1000 * 60 * 60 * 24));
    
    if (days === 0) return 'Today';
    if (days === 1) return 'Yesterday';
    return `${days} days ago`;
  };

  return (
    <div className="bg-card rounded-lg border border-border p-6">
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center space-x-3">
          <Icon name="Bug" size={24} className="text-primary" />
          <div>
            <h2 className="text-xl font-semibold text-card-foreground">Vulnerability Overview</h2>
            <p className="text-sm text-muted-foreground">{stats?.total} vulnerabilities found</p>
          </div>
        </div>
        <Button variant="outline" size="sm" iconName="Download">
          Export Report
        </Button>
      </div>
      {/* Vulnerability Stats */}
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
        <div className="p-3 rounded-lg border border-error bg-error/5">
          <div className="flex items-center justify-between">
            <div>
              <div className="text-2xl font-bold text-error">{stats?.critical}</div>
              <div className="text-sm text-error/80">Critical</div>
            </div>
            <Icon name="AlertTriangle" size={20} className="text-error" />
          </div>
        </div>
        <div className="p-3 rounded-lg border border-warning bg-warning/5">
          <div className="flex items-center justify-between">
            <div>
              <div className="text-2xl font-bold text-warning">{stats?.high}</div>
              <div className="text-sm text-warning/80">High</div>
            </div>
            <Icon name="AlertCircle" size={20} className="text-warning" />
          </div>
        </div>
        <div className="p-3 rounded-lg border border-accent bg-accent/5">
          <div className="flex items-center justify-between">
            <div>
              <div className="text-2xl font-bold text-accent">{stats?.medium}</div>
              <div className="text-sm text-accent/80">Medium</div>
            </div>
            <Icon name="Info" size={20} className="text-accent" />
          </div>
        </div>
        <div className="p-3 rounded-lg border border-success bg-success/5">
          <div className="flex items-center justify-between">
            <div>
              <div className="text-2xl font-bold text-success">{stats?.low}</div>
              <div className="text-sm text-success/80">Low</div>
            </div>
            <Icon name="CheckCircle" size={20} className="text-success" />
          </div>
        </div>
      </div>
      {/* Category Filter */}
      <div className="flex flex-wrap gap-2 mb-6">
        {categories?.map((category) => (
          <Button
            key={category?.id}
            variant={selectedCategory === category?.id ? 'default' : 'outline'}
            size="sm"
            iconName={category?.icon}
            onClick={() => setSelectedCategory(category?.id)}
          >
            {category?.label}
          </Button>
        ))}
      </div>
      {/* Vulnerabilities List */}
      <div className="space-y-4 max-h-96 overflow-y-auto">
        {filteredVulnerabilities?.map((vuln) => (
          <div
            key={vuln?.id}
            className={`p-4 rounded-lg border transition-all duration-200 hover:shadow-md ${getSeverityColor(vuln?.severity)}`}
          >
            <div className="flex items-start justify-between mb-3">
              <div className="flex-1">
                <div className="flex items-center space-x-3 mb-2">
                  <h3 className="font-semibold text-card-foreground">{vuln?.title}</h3>
                  <span className={`px-2 py-1 text-xs font-medium rounded-full ${getSeverityColor(vuln?.severity)}`}>
                    {vuln?.severity?.toUpperCase()}
                  </span>
                  <div className="flex items-center space-x-1">
                    <span className="text-xs text-muted-foreground">CVSS:</span>
                    <span className={`text-sm font-bold ${getCVSSColor(vuln?.cvsScore)}`}>
                      {vuln?.cvsScore}
                    </span>
                  </div>
                </div>
                <p className="text-sm text-muted-foreground mb-2">{vuln?.description}</p>
                <div className="flex items-center space-x-4 text-sm text-muted-foreground">
                  <div className="flex items-center space-x-1">
                    <Icon name="Target" size={14} />
                    <span>{vuln?.affectedAssets} assets</span>
                  </div>
                  <div className="flex items-center space-x-1">
                    <Icon name="Clock" size={14} />
                    <span>{vuln?.timeToFix}</span>
                  </div>
                  <div className="flex items-center space-x-1">
                    <Icon name="Calendar" size={14} />
                    <span>{formatDate(vuln?.discoveredDate)}</span>
                  </div>
                </div>
              </div>
            </div>
            
            <div className="flex items-center justify-between">
              <div className="flex-1">
                <div className="text-sm font-medium text-card-foreground mb-1">Recommended Action:</div>
                <div className="text-sm text-muted-foreground">{vuln?.remediation}</div>
              </div>
              <div className="flex items-center space-x-2 ml-4">
                <Button variant="outline" size="sm" iconName="Eye">
                  Details
                </Button>
                <Button variant="default" size="sm" iconName="Wrench">
                  Fix Now
                </Button>
              </div>
            </div>
          </div>
        ))}
      </div>
      {filteredVulnerabilities?.length === 0 && (
        <div className="text-center py-8">
          <Icon name="Shield" size={48} className="text-muted-foreground mx-auto mb-4" />
          <p className="text-muted-foreground">No vulnerabilities found in this category</p>
        </div>
      )}
    </div>
  );
};

export default VulnerabilityOverview;